package com.itextos.beacon.platform.walletreminder;

import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

import com.itextos.beacon.commonlib.constants.ClusterType;
import com.itextos.beacon.commonlib.constants.Component;
import com.itextos.beacon.commonlib.redisconnectionprovider.RedisConnectionProvider;

import redis.clients.jedis.Jedis;
import redis.clients.jedis.Pipeline;
import redis.clients.jedis.Response;

public class DeleteUnwantedEntries
{

    private static final String   REDIS_PREAPID_KEY = "wallet:amount";

    private static final String[] cliIds            =
    { "1000000100000002", "1000000100010001", "1000000100020000", "1000000100030000", "1100000100000000", "1100000100010000", "1100000100010001", "1200000100000001", "1200000100010000",
            "1200000100010001", "1300000100000001", "1300000100010000", "1300000100010001", "1500000100000000", "1600000100000000", "1700000100000000", "1800000100000000", "2000000100000000",
            "2000000100000001", "2000000100000002", "2000000100000003", "2000000100000004", "2000000100000005", "2000000100000006", "2000000100000007", "2000000100000008", "2000000100000009",
            "2000000100000010", "2000000100000011", "2000000100000012", "2000000100000013", "2000000100000014", "2000000100000015", "2000000100000016", "2000000100000017", "2000000100010000",
            "2000000100010001", "2000000100010002", "2000000100010003", "2000000100010004", "2000000100020000", "2000000100030000", "2000000100040000", "2000000100050000", "2000000100060000",
            "2000000100070000", "2000000100080000", "2000000100090000", "2000000100100000", "2000000100110000", "2000000100120000", "2000000100130000", "2000000200000000", "2000000200000001",
            "2000000200000002", "2000000200010000", "2000000200020000", "2000000200030000", "2000000200040000", "2000000300000002", "2000000300000003", "2000000300000004", "2000000300000005",
            "2000000300020000", "2000000300060000", "3000000200000000", "3000000200000001", "3000000200000002", "3000000200000003", "3000000200000004", "3000000200000005", "3000000200000006",
            "3000000200000007", "3000000200000008", "3000000200000009", "3000000200000010", "3000000200000011", "3000000400000000", "3000000400000001", "3000000400000002", "3000000500000000",
            "3000000500000001", "3000000500000002", "3000000600000000", "3000000600000001", "3000000700000000", "3000000700000001", "3000000700000002", "3000000800000000", "3000000900000000",
            "3000000900000001", "3000001000000000", "3000001000000001", "3000001100000000", "3000001100000001", "3000001200000000", "3000001200000001", "3000001200000002", "3000001200000003",
            "3000001200000004", "3000001200000005", "3000001200000006", "3000001300000000", "3000001300000001", "3000001400000000", "3000001400000001", "3000001400000002", "3000001400000003",
            "3000001400000004", "3000001500000000", "3000001500000001", "3000001500000002", "3000001500000003", "3000001500000004", "3000001600000000", "3000001600000001", "3000001700000000",
            "3000001700000001", "3000001700000002", "3000001700000003", "4000000300000003", "4000000400000000", "4000000600000000", "4000000600000001", "4000000600000002", "4000000600000003",
            "4000000600000004", "4000000600000005", "4000000600000006", "4000000600000007", "4000002900000000", "4000002900000001", "4000002900000002", "4000003600000003", "4000003600000004",
            "4000004100000000", "4000004100000001", "4000004500000000", "4000004600000000", "4000005000000000", "4000005200000000", "4000005400000000", "4000005600000000", "4000008300000000",
            "4000008300000001", "4000008800000000", "4000008800000001", "5000000100000000", "5000000200000000", "4000004800000000", "2000000300050000", "4000008600010000", "2000000300040000",
            "4000003400000000", "4000003700000000", "4000000100460000", "2000000300000001", "4000006400000001", "2000000300000000", "2000000300010000", "2000000300030000", "4000000100000001",
            "4000000100000002", "4000000100000003", "4000000100000024", "4000000100000032", "4000001100000001", "4000008000000001", "1000000100000001", "1000000100010000", "1100000100000001",
            "4000007700000000", "4000003600000000", "4000008700000000", "4000003600000002", "4000003600000001", "4000000100440000", "4000000100000020", "4000000100000005", "4000000700000001",
            "4000004200000000", "4000000100000008", "4000000100000017", "3000000100000000", "3000000100000002", "3000000300000000", "3000000300000001", "3000000300000002", "3000000300000003",
            "3000000300000004", "4000000100000000", "4000000100000004", "4000000100000006", "4000000100000007", "4000000100000009", "4000000100000010", "4000000100000011", "4000000100000012",
            "4000000100000013", "4000000100000014", "4000000100000015", "4000000100000016", "4000000100000018", "4000000500000000", "4000000500000001", "4000000700000000", "4000000900000000",
            "4000000900000001", "4000000900000002", "4000001100000000", "4000001100000002", "4000001100000003", "4000001200000000", "4000001200000001", "4000001300000000", "4000001300000001",
            "4000002100000000", "4000002100000001", "4000004800000002", "4000000800000002", "7000000100000000", "6000000100000000", "4000004200000001", "1200000100000000", "1300000100000000" };

    public static void main(
            String[] args)
    {
        // removeEntries();
    }

    private static void removeEntries()
    {

        try (
                Jedis jedis = getConnection();
                Pipeline pipe = jedis.pipelined();)
        {
            final Map<String, Response<Long>> results = new HashMap<>();

            for (final String s : cliIds)
            {
                final Response<Long> lHdel = pipe.hdel(REDIS_PREAPID_KEY, s);
                results.put(s, lHdel);
            }

            pipe.sync();

            for (final Entry<String, Response<Long>> entry : results.entrySet())
                System.out.println(entry.getKey() + " > " + entry.getValue().get());
        }
    }

    private static Jedis getConnection()
    {
        return RedisConnectionProvider.getInstance().getConnection(ClusterType.COMMON, Component.WALLET_CHK, 1);
    }

}
